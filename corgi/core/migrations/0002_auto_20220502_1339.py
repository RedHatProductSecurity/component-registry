# Generated by Django 3.2.12 on 2022-05-02 13:39

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0001_initial"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="component",
            name="tags",
        ),
        migrations.RemoveField(
            model_name="compose",
            name="tags",
        ),
        migrations.RemoveField(
            model_name="erratum",
            name="tags",
        ),
        migrations.RemoveField(
            model_name="product",
            name="tags",
        ),
        migrations.RemoveField(
            model_name="productstream",
            name="tags",
        ),
        migrations.RemoveField(
            model_name="productvariant",
            name="tags",
        ),
        migrations.RemoveField(
            model_name="productversion",
            name="tags",
        ),
        migrations.RemoveField(
            model_name="softwarebuild",
            name="tags",
        ),
        migrations.CreateModel(
            name="SoftwareBuildTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("last_changed", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("name", models.SlugField()),
                ("value", models.CharField(default="", max_length=1024)),
                (
                    "software_build",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tags",
                        to="core.softwarebuild",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProductVersionTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.SlugField()),
                ("value", models.CharField(default="", max_length=1024)),
                (
                    "product_version",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tags",
                        to="core.productversion",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProductVariantTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.SlugField()),
                ("value", models.CharField(default="", max_length=1024)),
                (
                    "product_variant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tags",
                        to="core.productvariant",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProductTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.SlugField()),
                ("value", models.CharField(default="", max_length=1024)),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tags",
                        to="core.product",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProductStreamTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.SlugField()),
                ("value", models.CharField(default="", max_length=1024)),
                (
                    "product_stream",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tags",
                        to="core.productstream",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ComponentTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.SlugField()),
                ("value", models.CharField(default="", max_length=1024)),
                (
                    "component",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tags",
                        to="core.component",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="softwarebuildtag",
            constraint=models.CheckConstraint(
                check=models.Q(("name", ""), _negated=True), name="softwarebuildtag_name_required"
            ),
        ),
        migrations.AddConstraint(
            model_name="softwarebuildtag",
            constraint=models.UniqueConstraint(
                fields=("name", "value", "software_build"), name="unique_softwarebuildtag"
            ),
        ),
        migrations.AddConstraint(
            model_name="productversiontag",
            constraint=models.CheckConstraint(
                check=models.Q(("name", ""), _negated=True), name="productversiontag_name_required"
            ),
        ),
        migrations.AddConstraint(
            model_name="productversiontag",
            constraint=models.UniqueConstraint(
                fields=("name", "value", "product_version"), name="unique_productversiontag"
            ),
        ),
        migrations.AddConstraint(
            model_name="productvarianttag",
            constraint=models.CheckConstraint(
                check=models.Q(("name", ""), _negated=True), name="productvarianttag_name_required"
            ),
        ),
        migrations.AddConstraint(
            model_name="productvarianttag",
            constraint=models.UniqueConstraint(
                fields=("name", "value", "product_variant"), name="unique_productvarianttag"
            ),
        ),
        migrations.AddConstraint(
            model_name="producttag",
            constraint=models.CheckConstraint(
                check=models.Q(("name", ""), _negated=True), name="producttag_name_required"
            ),
        ),
        migrations.AddConstraint(
            model_name="producttag",
            constraint=models.UniqueConstraint(
                fields=("name", "value", "product"), name="unique_producttag"
            ),
        ),
        migrations.AddConstraint(
            model_name="productstreamtag",
            constraint=models.CheckConstraint(
                check=models.Q(("name", ""), _negated=True), name="productstreamtag_name_required"
            ),
        ),
        migrations.AddConstraint(
            model_name="productstreamtag",
            constraint=models.UniqueConstraint(
                fields=("name", "value", "product_stream"), name="unique_productstreamtag"
            ),
        ),
        migrations.AddConstraint(
            model_name="componenttag",
            constraint=models.CheckConstraint(
                check=models.Q(("name", ""), _negated=True), name="componenttag_name_required"
            ),
        ),
        migrations.AddConstraint(
            model_name="componenttag",
            constraint=models.UniqueConstraint(
                fields=("name", "value", "component"), name="unique_componenttag"
            ),
        ),
    ]

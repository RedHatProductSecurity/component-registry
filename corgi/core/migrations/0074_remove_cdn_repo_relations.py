# Generated by Django 3.2.18 on 2023-06-19 02:18

from django.db import migrations, models

# Non-historical model, i.e. if you change save_product_taxonomy() tomorrow
# the migration will not run the same code as before (at the time the migration was written)
from corgi.core.models import ROOT_COMPONENTS_CONDITION
from corgi.tasks.brew import slow_fetch_brew_build


def remove_cdn_repo_relations(apps, schema_editor):
    """Remove CDN_REPO relations created by the Pulp collector,
    then fix the product taxonomy on all builds / components that had these relations"""
    Component = apps.get_model("core", "Component")
    ProductComponentRelation = apps.get_model("core", "ProductComponentRelation")
    SoftwareBuild = apps.get_model("core", "SoftwareBuild")

    for build_pk in (
        ProductComponentRelation.objects.filter(software_build_id__isnull=False, type="CDN_REPO")
        .values_list("software_build_id", flat=True)
        .distinct()
        .iterator()
    ):
        # Fix all components on builds that have CDN_REPO relations
        root_component = Component.objects.filter(
            ROOT_COMPONENTS_CONDITION | models.Q(type="RPMMOD")
        ).get(software_build_id=build_pk)
        # Fix the root component linked directly to this build
        # Clear the Variant / Channel links since they're wrong
        # We only append to links when saving taxonomies
        # So to remove bad data and add the right data
        # We need to clear first, and then reprocess afterwards
        root_component.channels.clear()
        root_component.productvariants.clear()

        # Also clear the stream / version / product links
        # We add the parents of some Variant to this Component
        # Since the Variant is now gone, remove its parents as well
        # Should be a no-op in most cases, we'll add back all products
        # that were removed using other relations
        # But when a build no longer relates to any Variants
        # we want to handle this edge case and unlink it from everything
        root_component.productstreams.clear()
        root_component.productversions.clear()
        root_component.products.clear()

        for provided_component in root_component.provides.get_queryset():
            # Fix the provided components
            # They aren't always linked to the build, so can't be handled above
            provided_component.channels.clear()
            provided_component.productvariants.clear()
            provided_component.productstreams.clear()
            provided_component.productversions.clear()
            provided_component.products.clear()

        for upstream_component in root_component.upstreams.get_queryset():
            # Fix the upstream components
            # They aren't ever linked to the build, so can't be handled above
            upstream_component.channels.clear()
            upstream_component.productvariants.clear()
            upstream_component.productstreams.clear()
            upstream_component.productversions.clear()
            upstream_component.products.clear()

        # Delete CDN_REPO relations for this build, then fix taxonomies
        ProductComponentRelation.objects.filter(
            software_build_id=build_pk, type="CDN_REPO"
        ).delete()
        # Add the correct Component-Variant links on all Components in this build
        # Existing builds just have their taxonomies saved
        build_id, build_type = (
            SoftwareBuild.objects.filter(pk=build_pk).values_list("build_id", "build_type").get()
        )
        slow_fetch_brew_build.delay(build_id, build_type)

    # Delete CDN_REPO relations for builds which haven't been loaded yet (if any)
    ProductComponentRelation.objects.filter(type="CDN_REPO").delete()


if __name__ == "__main__":
    from django.apps import apps

    remove_cdn_repo_relations(apps, {})


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0073_fix_component_upstreams_and_software_builds"),
    ]

    operations = [
        migrations.RunPython(remove_cdn_repo_relations),
        migrations.AlterField(
            model_name="productcomponentrelation",
            name="type",
            field=models.CharField(
                choices=[
                    ("ERRATA", "Errata"),
                    ("COMPOSE", "Compose"),
                    ("BREW_TAG", "Brew Tag"),
                    ("YUM_REPO", "Yum Repo"),
                    ("APP_INTERFACE", "App Interface"),
                ],
                max_length=50,
            ),
        ),
    ]
